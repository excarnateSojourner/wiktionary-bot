'''
Replace U+2019 RIGHT SINGLE QUOTATION MARK with U+02BC MODIFIER LETTER APOSTROPHE in entries listed on ns0_list.txt, which is generated by ns0_search.py.
'''

import argparse
import itertools
import re

import pywikibot
import pywikibot.pagegenerators

quote_mark = '\N{RIGHT SINGLE QUOTATION MARK}'
mod_letter = '\N{MODIFIER LETTER APOSTROPHE}'
summary = 'Replace curly quotes (U+2019) with modifier letter apostrophes (U+02BC) per [[Wiktionary:Requests for moves, mergers and splits#Entries in CAT:Taos lemmas with curly apostrophes|discussion]].'

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('input_path', help='Path of the list of entries to parse.')
	parser.add_argument('-l', '--limit', default=-1, type=int, help='Maximum number of entries to perform replacements on.')
	parser.add_argument('-d', '--dry-run', action='store_true', help='Do not replace; just print replacements that would be made.')
	parser.add_argument('-v', '--verbose', action='store_true')
	args = parser.parse_args()

	site = pywikibot.Site()
	with open(args.input_path, errors='ignore') as in_file:
		pages = {pywikibot.Page(site, line[:-1], 0) for line in in_file}

	page_count = 0
	for page in pages:
		if 0 <= args.limit <= page_count:
			print(f'Limit reached.')
			break

		page_lines = page.text.splitlines()
		page_modified = False
		print(f'Reading {page.title(as_link=True)}...')
		for i, line in enumerate(page_lines):
			page_lines[i], sub_count = re.subn(r'(\{\{[^}]*?\|twf\|[^}]*?)' + quote_mark + r'([^}]*?\}\})', r'\1' + mod_letter + r'\2', line)
			if sub_count:
				page_modified = True
				if args.verbose:
					print(f'Before: ' + line.encode('unicode-escape').decode())
					print(f' After: ' + page_lines[i].encode('unicode-escape').decode())
		if page_modified:
			page.text = '\n'.join(page_lines)
			if args.dry_run:
				with open(f'{i}-{page.title().replace("/", "-")}.wiki', 'w') as saveFile:
					saveFile.write(page.text)
			else:
				page.save(summary=summary, botflag=True, quiet=False)
			page_count += 1
		else:
			print(f'WARNING: Did not find any quotes to replace in {page.title(as_link=True)}.')

if __name__ == '__main__':
	main()
